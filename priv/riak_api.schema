%% HTTP Listeners
%% @doc listener.http.<name> is an IP address and TCP port that the Riak
%% HTTP interface will bind.
{mapping, "listener.http.$name", "riak_api.http", [
  {default, {"{{web_ip}}",{{web_port}} }},
  {datatype, ip},
  {include_default, "internal"}
]}.

{ translation,
  "riak_api.http",
    fun(Conf) ->
        HTTP = cuttlefish_util:filter_by_variable_starts_with("listener.http", Conf),
        [ IP || {_, IP} <- HTTP]
    end
}.

%% protobuf Listeners
%% @doc listener.protobuf.<name> is an IP address and TCP port that the Riak 
%% Protocol Buffers interface will bind.
{mapping, "listener.protobuf.$name", "riak_api.pb", [
  {default, "{{pb_ip}}:{{pb_port}}"},
  {datatype, ip},
  {include_default, "internal"}
]}.

{ translation,
  "riak_api.pb",
    fun(Conf) ->
        PB = cuttlefish_util:filter_by_variable_starts_with("listener.protobuf", Conf),
        [ IP || {_, IP} <- PB]
    end
}.

%% @doc pb_backlog is the maximum length to which the queue of pending
%% connections may grow. If set, it must be an integer >= 0.
%% By default the value is 5. If you anticipate a huge number of
%% connections being initialised *simultaneously*, set this number
%% higher.
{mapping, "protobuf.backlog", "riak_api.pb_backlog", [
  {datatype, integer},
  {default, 128},
  {commented, 128}
]}.

%% @doc 
{mapping, "protobuf.nagle", "riak_api.disable_pb_nagle", [
  {datatype, {enum, [on, off]}},
  {default, off},
  {level, advanced}
]}.

{ translation, 
  "riak_api.disable_pb_nagle", 
  fun(Conf) ->
    Nagle = cuttlefish_util:conf_get_value("protobuf.nagle", Conf), 
    case Nagle of
      off -> true;
      on -> false;
      _ -> true
    end
  end
}.

%% @doc listener.https.<name> is an IP address and TCP port that the Riak
%% HTTPS interface will bind.
{mapping, "listener.https.$name", "riak_api.https", [
  {commented, {"{{web_ip}}",{{web_port}} }},
  {datatype, ip},
  {include_default, "internal"}
]}.

{ translation,
  "riak_api.https",
    fun(Conf) ->
        HTTPS = cuttlefish_util:filter_by_variable_starts_with("listener.https", Conf),
        [ IP || {_, IP} <- HTTPS]
    end
}.
